{"version":3,"sources":["reportWebVitals.ts","components/SegmentedPicker/SegmentedPicker.tsx","components/Slider/Slider.tsx","views/App/constants.ts","views/App/quantitiesReducer.ts","views/App/utils.ts","views/App/App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SegmentedPicker","name","onChange","options","selectedValue","title","className","style","gridTemplateColumns","length","map","option","i","type","defaultChecked","value","calculateBackgroundSize","min","max","numericValue","Number","numericMin","Slider","defaultValue","unit","props","backgroundSize","e","target","flavorOptions","concentrationOptions","roastOptions","temperatures","light","medium","dark","actions","cups","coffee","water","initialQuantities","quantitiesReducer","state","action","payload","Math","round","flavors","standard","sweet","bright","concentrations","strong","App","useReducer","quantities","dispatch","useState","roast","setRoast","flavor","concentration","preferences","setPreferences","handleQuantitiesChange","quantitiesReducerActions","currentTarget","handlePreferencesChange","prevPreferences","pours","flavorWater","concentrationWater","f","c","calculatePours","pourGridColumns","columns","forEach","pour","push","join","calculatePourGridColumns","id","p","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAceA,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,oCCuCCQ,EAlCS,SAAC,GAME,IALzBC,EAKwB,EALxBA,KACAC,EAIwB,EAJxBA,SACAC,EAGwB,EAHxBA,QACAC,EAEwB,EAFxBA,cACAC,EACwB,EADxBA,MAEA,OACE,sBAAKC,UAAU,6BAAf,UACGD,GAAS,oBAAIC,UAAU,yBAAd,SAAwCD,IAClD,qBACEC,UAAU,2BACVC,MAAO,CACLC,oBAAoB,UAAD,OAAYL,EAAQM,OAApB,WAHvB,SAMGN,EAAQO,KAAI,SAACC,EAAQC,GAAT,OACX,wBAAON,UAAU,kCAAjB,UACE,uBACEL,KAAMA,EACNY,KAAK,QACLP,UAAU,yBACVQ,eAAgBH,IAAWP,EAC3BF,SAAUA,EACVa,MAAOJ,IAET,sBAAML,UAAU,0BAAhB,SAA2CK,MATWC,Y,gFCzB5DI,EAA0B,SAC9BC,EACAC,EACAH,GAEA,IAAMI,EAAeC,OAAOL,GACtBM,EAAaD,OAAOH,GAG1B,OACiC,KAA7BE,EAAeE,IAHAD,OAAOF,GAG4BG,GAAc,UA6DvDC,EAzDA,SAAC,GASU,EARxBC,aAQyB,IAPzBrB,EAOwB,EAPxBA,SACAgB,EAMwB,EANxBA,IACAD,EAKwB,EALxBA,IACAZ,EAIwB,EAJxBA,MACAmB,EAGwB,EAHxBA,KACAT,EAEwB,EAFxBA,MACGU,EACqB,iBAWlBC,EAAiBV,EAAwBC,EAAKC,EAAKH,GAEzD,OACE,sBAAKT,UAAU,mBAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,+BAAOD,IACP,iCACGU,EACAS,QAGL,qBAAKlB,UAAU,yBAAf,SACE,iDACMmB,GADN,IAEER,IAAKA,EACLC,IAAKA,EACLH,MAAOA,EACPb,SA3Ba,SAACyB,GACpB,IAAQC,EAAWD,EAAXC,OACRA,EAAOrB,MAAMmB,eAAiBV,EAC5BY,EAAOX,IACPW,EAAOV,IACPU,EAAOb,OAETb,GAAYA,EAASyB,IAqBfd,KAAK,QACLP,UAAU,SACVC,MAAO,CAAEmB,uBAGb,sBAAKpB,UAAU,gBAAf,UACE,iCACGW,EACAO,KAEH,iCACGN,EACAM,YCtEEK,EAAgB,CAAC,WAAY,QAAS,UACtCC,EAAuB,CAAC,QAAS,SAAU,UAC3CC,EAAe,CAAC,QAAS,SAAU,QAEnCC,EAET,CACFC,MAAO,GACPC,OAAQ,GACRC,KAAM,ICEKC,EAET,CACFC,KAAM,eACNC,OAAQ,iBACRC,MAAO,iBAGIC,EAAoB,CAC/BH,KAAM,EACNC,OAAQ,GACRC,MAAO,KAGIE,EAAoB,SAC/BC,EACAC,GAEA,IAAQ9B,EAAkB8B,EAAlB9B,KAAM+B,EAAYD,EAAZC,QACd,OAAQ/B,GACN,KAAKuB,EAAQC,KACX,MAAO,CACLA,KAAMO,EACNN,OAAQO,KAAKC,MAAMF,EAAUJ,EAAkBF,QAC/CC,MAAOM,KAAKC,MAAMF,EAAUJ,EAAkBD,QAElD,KAAKH,EAAQE,OACX,MAAO,CACLD,KAAMQ,KAAKC,MAAMF,EAAUJ,EAAkBF,QAC7CA,OAAQM,EACRL,MAAOM,KAAKC,MACTF,EAAUJ,EAAkBD,MAASC,EAAkBF,SAG9D,KAAKF,EAAQG,MACX,MAAO,CACLF,KAAMQ,KAAKC,MACRF,EAAUJ,EAAkBH,KAAQG,EAAkBD,OAEzDD,OAAQO,KAAKC,MACVF,EAAUJ,EAAkBF,OAAUE,EAAkBD,OAE3DA,MAAOK,GAEX,QACE,OAAOF,ICxDPK,EAEF,CACFC,SAAU,CAAC,GAAI,IACfC,MAAO,CAAC,MAAO,OACfC,OAAQ,CAAC,MAAO,QAGZC,EAEF,CACFlB,MAAO,CAAC,KACRC,OAAQ,CAAC,GAAI,IACbkB,OAAQ,CAAC,MAAO,MAAO,QC6IVC,G,MAtIH,WACV,MAA+BC,qBAC7Bb,EACAD,GAFF,mBAAOe,EAAP,KAAmBC,EAAnB,KAKA,EAA0BC,mBAAS,SAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAsCF,mBAAS,CAC7CG,OAAQ,WACRC,cAAe,WAFjB,mBAAOC,EAAP,KAAoBC,EAApB,KAIMC,EAAyB,SAACrC,GAC9B6B,EAAS,CACP3C,KAAMoD,EAAyBtC,EAAEuC,cAAcjE,MAC/C2C,QAASxB,OAAOO,EAAEuC,cAAcnD,UAG9BoD,EAA0B,SAACxC,GAC/B,IAAQuC,EAAkBvC,EAAlBuC,cACRH,GAAe,SAACK,GAAD,mBAAC,eACXA,GADU,kBAEZF,EAAcjE,KAAOiE,EAAcnD,YAOlCsD,EDhCsB,SAAC,GAQxB,IAPL9B,EAOI,EAPJA,MACAqB,EAMI,EANJA,OACAC,EAKI,EALJA,cAMMS,EAAsB,GAAR/B,EACdgC,EAAqBhC,EAAQ+B,EACnC,MAAO,CACLV,OAAQb,EAAQa,GAAQlD,KAAI,SAAC8D,GAAD,OAAOF,GAAeE,EAAI,QACtDX,cAAeV,EAAeU,GAAenD,KAC3C,SAAC+D,GAAD,OAAOF,GAAsBE,EAAI,SCkBvBC,CAAe,CAC3BnC,MAAOgB,EAAWhB,MAClBqB,OAAQE,EAAYF,OACpBC,cAAeC,EAAYD,gBAGvBc,EDnBgC,SACtCN,EAIA9B,GAEA,IAAMqC,EAAoB,GAO1B,OANAP,EAAMT,OAAOiB,SAAQ,SAACC,GACpBF,EAAQG,KAAa,IAAPD,EAAcvC,EAAQ,QAEtC8B,EAAMR,cAAcgB,SAAQ,SAACC,GAC3BF,EAAQG,KAAa,IAAPD,EAAcvC,EAAQ,QAE/BqC,EAAQI,KAAK,KCKIC,CAAyBZ,EAAOd,EAAWhB,OAEnE,OACE,sBAAKjC,UAAU,MAAf,UACE,+DACA,sBAAKA,UAAU,+BAAf,UACE,4CACA,qBAAKA,UAAU,4BAAf,SACE,cAAC,EAAD,CACEW,IAAI,IACJC,IAAI,KACJK,aAAa,IACb2D,GAAG,YACH7E,MAAM,OACNJ,KAAK,OACLc,MAAOwC,EAAWlB,KAClBnC,SAAU8D,MAGd,qBAAK1D,UAAU,4BAAf,SACE,cAAC,EAAD,CACEW,IAAI,KACJC,IAAI,MACJK,aAAa,KACb2D,GAAG,cACH7E,MAAM,SACNmB,KAAK,KACLvB,KAAK,SACLc,MAAOwC,EAAWjB,OAClBpC,SAAU8D,MAGd,qBAAK1D,UAAU,4BAAf,SACE,cAAC,EAAD,CACEW,IAAI,MACJC,IAAI,OACJK,aAAa,MACb2D,GAAG,aACH7E,MAAM,QACNJ,KAAK,QACLc,MAAOwC,EAAWhB,MAClBf,KAAK,KACLtB,SAAU8D,SAIhB,sBAAK1D,UAAU,+BAAf,UACE,6CACA,cAAC,EAAD,CACEF,cAAe0D,EAAYF,OAC3B3D,KAAK,SACLI,MAAM,SACNF,QAAS0B,EACT3B,SAAUiE,IAEZ,cAAC,EAAD,CACElE,KAAK,gBACLI,MAAM,gBACNF,QAAS2B,EACT1B,cAAe0D,EAAYD,cAC3B3D,SAAUiE,IAEZ,cAAC,EAAD,CACE/D,cAAesD,EACfzD,KAAK,QACLI,MAAM,QACNF,QAAS4B,EACT7B,SA7EkB,SAACyB,GACzBgC,EAAShC,EAAEuC,cAAcnD,UA8ErB,uBAAMT,UAAU,OAAhB,2DACiD0B,EAAa0B,GAD9D,cAKF,sBAAKpD,UAAU,+BAAf,UACE,uCACA,sBACEA,UAAU,iBACVC,MAAO,CAAEC,oBAAqBmE,GAFhC,UAIGN,EAAMT,OAAOlD,KAAI,SAACyE,EAAGvE,GAAJ,OAChB,uBAAMN,UAAU,OAAhB,UACGuC,KAAKC,MAAMqC,GADd,2BAAyCvE,OAI1CyD,EAAMR,cAAcnD,KAAI,SAACyE,EAAGvE,GAAJ,OACvB,uBAAMN,UAAU,OAAhB,UACGuC,KAAKC,MAAMqC,GADd,kCAAgDvE,UAKpD,sBAAMN,UAAU,OAAhB,qJCzIR8E,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BjG,M","file":"static/js/main.2f2e3ee5.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { ChangeEvent } from 'react';\n\nimport './SegmentedPicker.css';\n\ntype Props = {\n  title?: string;\n  options: string[];\n  name: string;\n  selectedValue: string;\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n};\n\n// TODO add border and animation\n\nconst SegmentedPicker = ({\n  name,\n  onChange,\n  options,\n  selectedValue,\n  title,\n}: Props): JSX.Element => {\n  return (\n    <div className=\"segmented-picker-container\">\n      {title && <h3 className=\"segmented-picker-title\">{title}</h3>}\n      <div\n        className=\"segmented-picker-options\"\n        style={{\n          gridTemplateColumns: `repeat(${options.length}, 1fr)`,\n        }}\n      >\n        {options.map((option, i) => (\n          <label className=\"segmented-picker-option-wrapper\" key={i}>\n            <input\n              name={name}\n              type=\"radio\"\n              className=\"segmented-picker-input\"\n              defaultChecked={option === selectedValue}\n              onChange={onChange}\n              value={option}\n            />\n            <span className=\"segmented-picker-custom\">{option}</span>\n          </label>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default SegmentedPicker;\n","import React, { ChangeEvent, InputHTMLAttributes } from 'react';\n\nimport './Slider.css';\n\ntype Props = { unit?: string } & InputHTMLAttributes<HTMLInputElement>;\n\nconst calculateBackgroundSize = (\n  min?: string | number,\n  max?: string | number,\n  value?: string | number | readonly string[]\n) => {\n  const numericValue = Number(value);\n  const numericMin = Number(min);\n  const NumericMax = Number(max);\n\n  return (\n    ((numericValue - numericMin) * 100) / (NumericMax - numericMin) + '% 100%'\n  );\n};\n\nconst Slider = ({\n  defaultValue,\n  onChange,\n  max,\n  min,\n  title,\n  unit,\n  value,\n  ...props\n}: Props): JSX.Element => {\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { target } = e;\n    target.style.backgroundSize = calculateBackgroundSize(\n      target.min,\n      target.max,\n      target.value\n    );\n    onChange && onChange(e);\n  };\n\n  const backgroundSize = calculateBackgroundSize(min, max, value);\n\n  return (\n    <div className=\"slider-container\">\n      <div className=\"slider-header\">\n        <span>{title}</span>\n        <span>\n          {value}\n          {unit}\n        </span>\n      </div>\n      <div className=\"slider-input-container\">\n        <input\n          {...props}\n          min={min}\n          max={max}\n          value={value}\n          onChange={handleChange}\n          type=\"range\"\n          className=\"slider\"\n          style={{ backgroundSize }}\n        />\n      </div>\n      <div className=\"slider-footer\">\n        <span>\n          {min}\n          {unit}\n        </span>\n        <span>\n          {max}\n          {unit}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default Slider;\n","export const flavorOptions = ['standard', 'sweet', 'bright'];\nexport const concentrationOptions = ['light', 'medium', 'strong'];\nexport const roastOptions = ['light', 'medium', 'dark'];\n\nexport const temperatures: {\n  [key: string]: number;\n} = {\n  light: 93,\n  medium: 88,\n  dark: 83,\n};\n","type QuantitiesState = {\n  cups: number;\n  coffee: number;\n  water: number;\n};\n\ntype QuantitiesAction =\n  | { type: 'increaseCups'; payload: number }\n  | { type: 'increaseCoffee'; payload: number }\n  | { type: 'increaseWater'; payload: number };\n\nexport const actions: {\n  [key: string]: 'increaseCups' | 'increaseCoffee' | 'increaseWater';\n} = {\n  cups: 'increaseCups',\n  coffee: 'increaseCoffee',\n  water: 'increaseWater',\n};\n\nexport const initialQuantities = {\n  cups: 1,\n  coffee: 16,\n  water: 236,\n};\n\nexport const quantitiesReducer = (\n  state: QuantitiesState,\n  action: QuantitiesAction\n) => {\n  const { type, payload } = action;\n  switch (type) {\n    case actions.cups:\n      return {\n        cups: payload,\n        coffee: Math.round(payload * initialQuantities.coffee),\n        water: Math.round(payload * initialQuantities.water),\n      };\n    case actions.coffee:\n      return {\n        cups: Math.round(payload / initialQuantities.coffee),\n        coffee: payload,\n        water: Math.round(\n          (payload * initialQuantities.water) / initialQuantities.coffee\n        ),\n      };\n    case actions.water:\n      return {\n        cups: Math.round(\n          (payload * initialQuantities.cups) / initialQuantities.water\n        ),\n        coffee: Math.round(\n          (payload * initialQuantities.coffee) / initialQuantities.water\n        ),\n        water: payload,\n      };\n    default:\n      return state;\n  }\n};\n","const flavors: {\n  [key: string]: number[];\n} = {\n  standard: [50, 50],\n  sweet: [41.66, 58.34],\n  bright: [58.34, 41.66],\n};\n\nconst concentrations: {\n  [key: string]: number[];\n} = {\n  light: [100],\n  medium: [50, 50],\n  strong: [33.33, 33.33, 33.33],\n};\n\nexport const calculatePours = ({\n  water,\n  flavor,\n  concentration,\n}: {\n  water: number;\n  flavor: string;\n  concentration: string;\n}) => {\n  const flavorWater = water * 0.4;\n  const concentrationWater = water - flavorWater;\n  return {\n    flavor: flavors[flavor].map((f) => flavorWater * (f / 100)),\n    concentration: concentrations[concentration].map(\n      (c) => concentrationWater * (c / 100)\n    ),\n  };\n};\n\nexport const calculatePourGridColumns = (\n  pours: {\n    flavor: number[];\n    concentration: number[];\n  },\n  water: number\n): string => {\n  const columns: string[] = [];\n  pours.flavor.forEach((pour) => {\n    columns.push((pour * 100) / water + '%');\n  });\n  pours.concentration.forEach((pour) => {\n    columns.push((pour * 100) / water + '%');\n  });\n  return columns.join(' ');\n};\n","import React, { ChangeEvent, useReducer, useState } from 'react';\n\nimport SegmentedPicker from '../../components/SegmentedPicker';\nimport Slider from '../../components/Slider';\n\nimport {\n  concentrationOptions,\n  flavorOptions,\n  roastOptions,\n  temperatures,\n} from './constants';\nimport {\n  actions as quantitiesReducerActions,\n  initialQuantities,\n  quantitiesReducer,\n} from './quantitiesReducer';\nimport { calculatePourGridColumns, calculatePours } from './utils';\n\nimport './App.css';\n\nconst App = (): JSX.Element => {\n  const [quantities, dispatch] = useReducer(\n    quantitiesReducer,\n    initialQuantities\n  );\n  // TODO type this better\n  const [roast, setRoast] = useState('light');\n  const [preferences, setPreferences] = useState({\n    flavor: 'standard',\n    concentration: 'medium',\n  });\n  const handleQuantitiesChange = (e: ChangeEvent<HTMLInputElement>) => {\n    dispatch({\n      type: quantitiesReducerActions[e.currentTarget.name],\n      payload: Number(e.currentTarget.value),\n    });\n  };\n  const handlePreferencesChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = e;\n    setPreferences((prevPreferences) => ({\n      ...prevPreferences,\n      [currentTarget.name]: currentTarget.value,\n    }));\n  };\n  const handleRoastChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setRoast(e.currentTarget.value);\n  };\n\n  const pours = calculatePours({\n    water: quantities.water,\n    flavor: preferences.flavor,\n    concentration: preferences.concentration,\n  });\n\n  const pourGridColumns = calculatePourGridColumns(pours, quantities.water);\n\n  return (\n    <div className=\"App\">\n      <h1>4:6 Brewing Method Calculator</h1>\n      <div className=\"quantities-container section\">\n        <h2>Quantities</h2>\n        <div className=\"quantity-slider-container\">\n          <Slider\n            min=\"1\"\n            max=\"10\"\n            defaultValue=\"1\"\n            id=\"cupsRange\"\n            title=\"Cups\"\n            name=\"cups\"\n            value={quantities.cups}\n            onChange={handleQuantitiesChange}\n          />\n        </div>\n        <div className=\"quantity-slider-container\">\n          <Slider\n            min=\"16\"\n            max=\"160\"\n            defaultValue=\"16\"\n            id=\"coffeeRange\"\n            title=\"Coffee\"\n            unit=\"gr\"\n            name=\"coffee\"\n            value={quantities.coffee}\n            onChange={handleQuantitiesChange}\n          />\n        </div>\n        <div className=\"quantity-slider-container\">\n          <Slider\n            min=\"236\"\n            max=\"2360\"\n            defaultValue=\"236\"\n            id=\"waterRange\"\n            title=\"Water\"\n            name=\"water\"\n            value={quantities.water}\n            unit=\"gr\"\n            onChange={handleQuantitiesChange}\n          />\n        </div>\n      </div>\n      <div className=\"quantities-container section\">\n        <h2>Preferences</h2>\n        <SegmentedPicker\n          selectedValue={preferences.flavor}\n          name=\"flavor\"\n          title=\"Flavor\"\n          options={flavorOptions}\n          onChange={handlePreferencesChange}\n        />\n        <SegmentedPicker\n          name=\"concentration\"\n          title=\"Concentration\"\n          options={concentrationOptions}\n          selectedValue={preferences.concentration}\n          onChange={handlePreferencesChange}\n        />\n        <SegmentedPicker\n          selectedValue={roast}\n          name=\"roast\"\n          title=\"Roast\"\n          options={roastOptions}\n          onChange={handleRoastChange}\n        />\n        <span className=\"hint\">\n          Recommended temperature for the water: around {temperatures[roast]}\n          ºC\n        </span>\n      </div>\n      <div className=\"quantities-container section\">\n        <h2>Pours</h2>\n        <div\n          className=\"pour-container\"\n          style={{ gridTemplateColumns: pourGridColumns }}\n        >\n          {pours.flavor.map((p, i) => (\n            <span className=\"pour\" key={`flavorPour${i}`}>\n              {Math.round(p)}gr\n            </span>\n          ))}\n          {pours.concentration.map((p, i) => (\n            <span className=\"pour\" key={`concentrationPour${i}`}>\n              {Math.round(p)}gr\n            </span>\n          ))}\n        </div>\n        <span className=\"hint\">\n          Each pour should be timed so that the hot water has almost completely\n          passed through the filter before pouring again. 1ml = 1gr\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './views/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}